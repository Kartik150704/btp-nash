"use client"

import { useState } from "react"
import { Plus, Trash2 } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Card, CardContent } from "@/components/ui/card"
import { Label } from "@/components/ui/label"

export function VulnerabilityForm({ numSubsystems, value, onChange }) {
  const addVulnerability = () => {
    onChange([
      ...value,
      {
        subsystemIndex: 0,
        impactScore: 5,
        exploitScore: 5,
        exploitExists: 0,
      },
    ])
  }

  const removeVulnerability = (index) => {
    onChange(value.filter((_, i) => i !== index))
  }

  const updateVulnerability = (index, field, newValue) => {
    onChange(value.map((v, i) => (i === index ? { ...v, [field]: newValue } : v)))
  }

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <Label>Vulnerabilities</Label>
        <Button onClick={addVulnerability} variant="outline" size="sm" className="flex items-center gap-2">
          <Plus className="h-4 w-4" />
          Add Vulnerability
        </Button>
      </div>

      <div className="grid gap-4">
        {value.map((vulnerability, index) => (
          <Card key={index}>
            <CardContent className="pt-6">
              <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-4">
                <div className="space-y-2">
                  <Label>Subsystem</Label>
                  <Select
                    value={vulnerability.subsystemIndex.toString()}
                    onValueChange={(val) => updateVulnerability(index, "subsystemIndex", Number.parseInt(val))}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select subsystem" />
                    </SelectTrigger>
                    <SelectContent>
                      {Array.from({ length: numSubsystems }).map((_, i) => (
                        <SelectItem key={i} value={i.toString()}>
                          Subsystem {i + 1}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label>Impact Score (1-10)</Label>
                  <Input
                    type="number"
                    min={1}
                    max={10}
                    value={vulnerability.impactScore}
                    onChange={(e) => updateVulnerability(index, "impactScore", Number.parseFloat(e.target.value))}
                  />
                </div>

                <div className="space-y-2">
                  <Label>Exploit Score (1-10)</Label>
                  <Input
                    type="number"
                    min={1}
                    max={10}
                    value={vulnerability.exploitScore}
                    onChange={(e) => updateVulnerability(index, "exploitScore", Number.parseFloat(e.target.value))}
                  />
                </div>

                <div className="space-y-2">
                  <Label>Exploit Exists</Label>
                  <Select
                    value={vulnerability.exploitExists.toString()}
                    onValueChange={(val) => updateVulnerability(index, "exploitExists", Number.parseInt(val))}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="0">No</SelectItem>
                      <SelectItem value="1">Yes</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <Button
                  variant="ghost"
                  size="icon"
                  className="absolute top-2 right-2"
                  onClick={() => removeVulnerability(index)}
                >
                  <Trash2 className="h-4 w-4" />
                  <span className="sr-only">Remove vulnerability</span>
                </Button>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  )
}
