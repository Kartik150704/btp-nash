"use client"

import React, { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "../components/ui/card.jsx"
import { Input } from "@/components/ui/input.jsx"
import { Label } from "../components/ui/label.jsx"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../components/ui/select.jsx"
import { Tooltip } from "../components/tooltip.jsx"
import { Button } from "../components/ui/button.jsx"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "../components/ui/tabs.jsx"
import { Badge } from "../components/ui/badge.jsx"

export function VulnerabilityForm({ numSubsystems, value, onChange }) {
  // Import tooltipDescriptions from parent component context
  const tooltipDescriptions = {
    impactScore: "CVSS Impact score (1-10) indicating the potential damage if the vulnerability is exploited.",
    exploitScore: "CVSS Exploitability score (1-10) indicating how easy it is to exploit the vulnerability.",
    exploitExists: "Binary indicator (0 or 1) of whether a public exploit exists for this vulnerability.",
    confidentialityImpact: "Impact on data confidentiality if the vulnerability is exploited (1-10). Higher values indicate more severe information disclosure.",
    integrityImpact: "Impact on data integrity if the vulnerability is exploited (1-10). Higher values indicate more severe data modification risks.",
    availabilityImpact: "Impact on system availability if the vulnerability is exploited (1-10). Higher values indicate more severe service disruption risks.",
    attackVector: "How the vulnerability can be exploited (1-10). Higher values indicate easier remote exploitation.",
    attackComplexity: "Technical difficulty of exploiting the vulnerability (1-10). Higher values indicate simpler exploitation techniques.",
    privilegesRequired: "Level of access needed to exploit the vulnerability (1-10). Higher values indicate fewer privileges needed.",
    userInteraction: "Whether user interaction is required for exploitation (1-10). Higher values indicate no user interaction needed.",
  }
  
  const [expandedVul, setExpandedVul] = useState(null)
  const [activeTab, setActiveTab] = useState({})
  
  // Additional detailed vulnerability properties
  const [detailedProperties, setDetailedProperties] = useState(
    Array(numSubsystems).fill().map(() => ({
      confidentialityImpact: 5,
      integrityImpact: 5,
      availabilityImpact: 5,
      attackVector: 5,
      attackComplexity: 5,
      privilegesRequired: 5,
      userInteraction: 5,
    }))
  )
  
  const handleValueChange = (idx, field, newValue) => {
    const updated = [...value]
    updated[idx] = { ...updated[idx], [field]: newValue }
    onChange(updated)
  }
  
  const handleDetailedChange = (idx, field, newValue) => {
    const updated = [...detailedProperties]
    updated[idx] = { ...updated[idx], [field]: newValue }
    setDetailedProperties(updated)
    
    // Update the main score based on detailed component averages
    if (['confidentialityImpact', 'integrityImpact', 'availabilityImpact'].includes(field)) {
      const avgImpact = (
        updated[idx].confidentialityImpact + 
        updated[idx].integrityImpact + 
        updated[idx].availabilityImpact
      ) / 3
      
      handleValueChange(idx, 'impactScore', Math.round(avgImpact * 10) / 10)
    }
    
    if (['attackVector', 'attackComplexity', 'privilegesRequired', 'userInteraction'].includes(field)) {
      const avgExploit = (
        updated[idx].attackVector + 
        updated[idx].attackComplexity + 
        updated[idx].privilegesRequired + 
        updated[idx].userInteraction
      ) / 4
      
      handleValueChange(idx, 'exploitScore', Math.round(avgExploit * 10) / 10)
    }
  }
  
  const toggleExpanded = (idx) => {
    setExpandedVul(expandedVul === idx ? null : idx)
    if (!activeTab[idx]) {
      setActiveTab({...activeTab, [idx]: "impact"})
    }
  }
  
  const updateVulnerabilities = () => {
    let updatedVulnerabilities = []
    for (let i = 0; i < numSubsystems; i++) {
      if (i < value.length) {
        updatedVulnerabilities.push({
          ...value[i],
          subsystemIndex: i,
        })
      } else {
        updatedVulnerabilities.push({
          subsystemIndex: i,
          impactScore: 5,
          exploitScore: 5,
          exploitExists: 0,
        })
      }
    }
    onChange(updatedVulnerabilities.slice(0, numSubsystems))
    
    // Also update detailed properties if needed
    if (detailedProperties.length !== numSubsystems) {
      setDetailedProperties(
        Array(numSubsystems)
          .fill()
          .map((_, i) => {
            if (i < detailedProperties.length) {
              return detailedProperties[i]
            } else {
              return {
                confidentialityImpact: 5,
                integrityImpact: 5,
                availabilityImpact: 5,
                attackVector: 5,
                attackComplexity: 5,
                privilegesRequired: 5,
                userInteraction: 5,
              }
            }
          })
      )
    }
  }
  
  // Calculate severity level
  const getSeverityLevel = (impactScore, exploitScore, exploitExists) => {
    const baseScore = (impactScore * 0.6) + (exploitScore * 0.4)
    
    if (baseScore >= 9) return { level: "Critical", color: "bg-red-500" }
    if (baseScore >= 7) return { level: "High", color: "bg-orange-500" }
    if (baseScore >= 5) return { level: "Medium", color: "bg-yellow-500" }
    if (baseScore >= 3) return { level: "Low", color: "bg-blue-500" }
    return { level: "Info", color: "bg-gray-500" }
  }
  
  // Ensure we have the right number of vulnerabilities 
  // Using useEffect instead of useState to avoid the setState-during-render error
  useEffect(() => {
    updateVulnerabilities()
  }, [numSubsystems])
  
  return (
    <div className="grid gap-4">
      {value.map((vul, idx) => {
        const severity = getSeverityLevel(vul.impactScore, vul.exploitScore, vul.exploitExists)
        
        return (
          <Card key={idx} className={`border ${expandedVul === idx ? 'border-blue-300 shadow-lg' : 'border-gray-200'} transition-all duration-200 overflow-hidden`}>
            <CardHeader className={`pb-2 ${expandedVul === idx ? 'bg-blue-50' : 'bg-gray-50'}`}>
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <CardTitle className="text-base font-medium">Subsystem {idx + 1}</CardTitle>
                  <Badge className={`${severity.color} hover:${severity.color}`}>
                    {severity.level}
                  </Badge>
                  {vul.exploitExists === 1 && (
                    <Badge variant="outline" className="border-red-300 text-red-700 bg-red-50">
                      Known Exploit
                    </Badge>
                  )}
                </div>
                <Button 
                  variant="ghost" 
                  size="sm"
                  onClick={() => toggleExpanded(idx)}
                  className="text-gray-500 hover:text-gray-700 -my-2"
                >
                  {expandedVul === idx ? (
                    <span className="flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-1"><path d="M5 12h14"/></svg>
                      Collapse
                    </span>
                  ) : (
                    <span className="flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-1"><path d="M12 5v14M5 12h14"/></svg>
                      Expand
                    </span>
                  )}
                </Button>
              </div>
            </CardHeader>
            
            <CardContent className={`pt-4 ${expandedVul === idx ? 'pb-4' : 'pb-3'}`}>
              <div className="flex flex-col gap-4">
                <div className="grid grid-cols-3 gap-4">
                  <div className="space-y-1">
                    <Tooltip content={tooltipDescriptions.impactScore}>
                      <Label className="text-sm flex items-center gap-1">
                        Impact Score
                        <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-gray-400"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
                      </Label>
                    </Tooltip>
                    <div className="relative">
                      <Input
                        type="number"
                        min="1"
                        max="10"
                        step="0.1"
                        value={vul.impactScore}
                        onChange={(e) => handleValueChange(idx, "impactScore", Number.parseFloat(e.target.value))}
                        className="border-gray-300 pr-8"
                      />
                      <div 
                        className="absolute inset-y-0 right-0 pr-2 flex items-center pointer-events-none"
                        style={{
                          color: vul.impactScore >= 7 ? "#dc2626" : 
                                 vul.impactScore >= 4 ? "#d97706" : "#0ea5e9"
                        }}
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="currentColor" stroke="none"><path d="M15.131 2.493L12.303 5.32 9.475 2.492C6.268 -0.714 0.714 4.84 3.92 8.046L6.748 10.874 1.042 16.581C-0.348 17.97 0.598 20.32 2.459 20.32C3.045 20.32 3.607 20.092 4.028 19.672L9.734 13.965 12.562 16.793C16.207 20.438 21.123 14.044 17.478 10.399L14.65 7.571 19.975 2.246C21.365 0.856 20.418 -1.493 18.558 -1.493C17.972 -1.493 17.41 -1.266 16.989 -0.845L15.131 2.493Z"></path></svg>
                      </div>
                    </div>
                  </div>
                  <div className="space-y-1">
                    <Tooltip content={tooltipDescriptions.exploitScore}>
                      <Label className="text-sm flex items-center gap-1">
                        Exploit Score
                        <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-gray-400"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
                      </Label>
                    </Tooltip>
                    <div className="relative">
                      <Input
                        type="number"
                        min="1"
                        max="10"
                        step="0.1"
                        value={vul.exploitScore}
                        onChange={(e) => handleValueChange(idx, "exploitScore", Number.parseFloat(e.target.value))}
                        className="border-gray-300 pr-8"
                      />
                      <div 
                        className="absolute inset-y-0 right-0 pr-2 flex items-center pointer-events-none"
                        style={{
                          color: vul.exploitScore >= 7 ? "#dc2626" : 
                                 vul.exploitScore >= 4 ? "#d97706" : "#0ea5e9"
                        }}
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M12 14c1.66 0 3-1.34 3-3V5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3z"></path><path d="M19 10v1a7 7 0 0 1-14 0v-1"></path><line x1="12" y1="19" x2="12" y2="23"></line><line x1="8" y1="23" x2="16" y2="23"></line></svg>
                      </div>
                    </div>
                  </div>
                  <div className="space-y-1">
                    <Tooltip content={tooltipDescriptions.exploitExists}>
                      <Label className="text-sm flex items-center gap-1">
                        Exploit Exists
                        <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-gray-400"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
                      </Label>
                    </Tooltip>
                    <Select
                      value={vul.exploitExists.toString()}
                      onValueChange={(value) => handleValueChange(idx, "exploitExists", parseInt(value))}
                    >
                      <SelectTrigger className={`border-gray-300 ${vul.exploitExists === 1 ? 'text-red-600' : 'text-gray-600'}`}>
                        <SelectValue placeholder="Select" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="0">No (0)</SelectItem>
                        <SelectItem value="1">Yes (1)</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                
                {expandedVul === idx && (
                  <div className="mt-2 border-t pt-4">
                    <Tabs value={activeTab[idx]} onValueChange={(value) => setActiveTab({...activeTab, [idx]: value})}>
                      <TabsList className="grid grid-cols-2 mb-4">
                        <TabsTrigger value="impact">Impact Components</TabsTrigger>
                        <TabsTrigger value="exploit">Exploit Components</TabsTrigger>
                      </TabsList>
                      
                      <TabsContent value="impact" className="mt-0">
                        <div className="grid grid-cols-3 gap-4">
                          <div className="space-y-1">
                            <Tooltip content={tooltipDescriptions.confidentialityImpact}>
                              <Label className="text-sm flex items-center gap-1">
                                Confidentiality
                                <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-gray-400"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
                              </Label>
                            </Tooltip>
                            <div className="relative">
                              <Input
                                type="number"
                                min="1"
                                max="10"
                                step="0.1"
                                value={detailedProperties[idx].confidentialityImpact}
                                onChange={(e) => handleDetailedChange(idx, "confidentialityImpact", Number.parseFloat(e.target.value))}
                                className="border-gray-300 pr-8"
                              />
                              <div 
                                className="absolute inset-y-0 right-0 pr-2 flex items-center pointer-events-none"
                                style={{
                                  color: detailedProperties[idx].confidentialityImpact >= 7 ? "#dc2626" : 
                                         detailedProperties[idx].confidentialityImpact >= 4 ? "#d97706" : "#0ea5e9"
                                }}
                              >
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect><path d="M7 11V7a5 5 0 0 1 10 0v4"></path></svg>
                              </div>
                            </div>
                          </div>
                          <div className="space-y-1">
                            <Tooltip content={tooltipDescriptions.integrityImpact}>
                              <Label className="text-sm flex items-center gap-1">
                                Integrity
                                <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-gray-400"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
                              </Label>
                            </Tooltip>
                            <div className="relative">
                              <Input
                                type="number"
                                min="1"
                                max="10"
                                step="0.1"
                                value={detailedProperties[idx].integrityImpact}
                                onChange={(e) => handleDetailedChange(idx, "integrityImpact", Number.parseFloat(e.target.value))}
                                className="border-gray-300 pr-8"
                              />
                              <div 
                                className="absolute inset-y-0 right-0 pr-2 flex items-center pointer-events-none"
                                style={{
                                  color: detailedProperties[idx].integrityImpact >= 7 ? "#dc2626" : 
                                         detailedProperties[idx].integrityImpact >= 4 ? "#d97706" : "#0ea5e9"
                                }}
                              >
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polyline points="20 6 9 17 4 12"></polyline></svg>
                              </div>
                            </div>
                          </div>
                          <div className="space-y-1">
                            <Tooltip content={tooltipDescriptions.availabilityImpact}>
                              <Label className="text-sm flex items-center gap-1">
                                Availability
                                <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-gray-400"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
                              </Label>
                            </Tooltip>
                            <div className="relative">
                              <Input
                                type="number"
                                min="1"
                                max="10"
                                step="0.1"
                                value={detailedProperties[idx].availabilityImpact}
                                onChange={(e) => handleDetailedChange(idx, "availabilityImpact", Number.parseFloat(e.target.value))}
                                className="border-gray-300 pr-8"
                              />
                              <div 
                                className="absolute inset-y-0 right-0 pr-2 flex items-center pointer-events-none"
                                style={{
                                  color: detailedProperties[idx].availabilityImpact >= 7 ? "#dc2626" : 
                                         detailedProperties[idx].availabilityImpact >= 4 ? "#d97706" : "#0ea5e9"
                                }}
                              >
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path></svg>
                              </div>
                            </div>
                          </div>
                        </div>
                      </TabsContent>
                      
                      <TabsContent value="exploit" className="mt-0">
                        <div className="grid grid-cols-2 gap-4">
                          <div className="space-y-1">
                            <Tooltip content={tooltipDescriptions.attackVector}>
                              <Label className="text-sm flex items-center gap-1">
                                Attack Vector
                                <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-gray-400"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
                              </Label>
                            </Tooltip>
                            <div className="relative">
                              <Input
                                type="number"
                                min="1"
                                max="10"
                                step="0.1"
                                value={detailedProperties[idx].attackVector}
                                onChange={(e) => handleDetailedChange(idx, "attackVector", Number.parseFloat(e.target.value))}
                                className="border-gray-300 pr-8"
                              />
                              <div 
                                className="absolute inset-y-0 right-0 pr-2 flex items-center pointer-events-none"
                                style={{
                                  color: detailedProperties[idx].attackVector >= 7 ? "#dc2626" : 
                                         detailedProperties[idx].attackVector >= 4 ? "#d97706" : "#0ea5e9"
                                }}
                              >
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polygon points="13 2 3 14 12 14 11 22 21 10 12 10 13 2"></polygon></svg>
                              </div>
                            </div>
                          </div>
                          <div className="space-y-1">
                            <Tooltip content={tooltipDescriptions.attackComplexity}>
                              <Label className="text-sm flex items-center gap-1">
                                Attack Complexity
                                <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-gray-400"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
                              </Label>
                            </Tooltip>
                            <div className="relative">
                              <Input
                                type="number"
                                min="1"
                                max="10"
                                step="0.1"
                                value={detailedProperties[idx].attackComplexity}
                                onChange={(e) => handleDetailedChange(idx, "attackComplexity", Number.parseFloat(e.target.value))}
                                className="border-gray-300 pr-8"
                              />
                              <div 
                                className="absolute inset-y-0 right-0 pr-2 flex items-center pointer-events-none"
                                style={{
                                  color: detailedProperties[idx].attackComplexity >= 7 ? "#dc2626" : 
                                         detailedProperties[idx].attackComplexity >= 4 ? "#d97706" : "#0ea5e9"
                                }}
                              >
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="3"></circle><path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path></svg>
                              </div>
                            </div>
                          </div>
                          <div className="space-y-1">
                            <Tooltip content={tooltipDescriptions.privilegesRequired}>
                              <Label className="text-sm flex items-center gap-1">
                                Privileges Required
                                <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-gray-400"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
                              </Label>
                            </Tooltip>
                            <div className="relative">
                              <Input
                                type="number"
                                min="1"
                                max="10"
                                step="0.1"
                                value={detailedProperties[idx].privilegesRequired}
                                onChange={(e) => handleDetailedChange(idx, "privilegesRequired", Number.parseFloat(e.target.value))}
                                className="border-gray-300 pr-8"
                              />
                              <div 
                                className="absolute inset-y-0 right-0 pr-2 flex items-center pointer-events-none"
                                style={{
                                  color: detailedProperties[idx].privilegesRequired >= 7 ? "#dc2626" : 
                                         detailedProperties[idx].privilegesRequired >= 4 ? "#d97706" : "#0ea5e9"
                                }}
                              >
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path></svg>
                              </div>
                            </div>
                          </div>
                          <div className="space-y-1">
                            <Tooltip content={tooltipDescriptions.userInteraction}>
                              <Label className="text-sm flex items-center gap-1">
                                User Interaction
                                <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-gray-400"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
                              </Label>
                            </Tooltip>
                            <div className="relative">
                              <Input
                                type="number"
                                min="1"
                                max="10"
                                step="0.1"
                                value={detailedProperties[idx].userInteraction}
                                onChange={(e) => handleDetailedChange(idx, "userInteraction", Number.parseFloat(e.target.value))}
                                className="border-gray-300 pr-8"
                              />
                              <div 
                                className="absolute inset-y-0 right-0 pr-2 flex items-center pointer-events-none"
                                style={{
                                  color: detailedProperties[idx].userInteraction >= 7 ? "#dc2626" : 
                                         detailedProperties[idx].userInteraction >= 4 ? "#d97706" : "#0ea5e9"
                                }}
                              >
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path><circle cx="12" cy="7" r="4"></circle></svg>
                              </div>
                            </div>
                          </div>
                        </div>
                      </TabsContent>
                    </Tabs>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        );
      })}
    </div>
  )
}